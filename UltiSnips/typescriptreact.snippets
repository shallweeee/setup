global !p
def snake(t):
    return '_'.join([w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t)])

def kebabcase(t):
    return '-'.join([w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t)])

def pascal(t):
    return re.sub(r'^(\w)', lambda m: m.group(1).upper(), t)

def formatVariableName(path):
    parts = path.split('/')
    module = parts[0]
    if len(parts) > 1:
        return parts[-1]
    else:
        return re.sub(r'[_\-]', '', module.title())

def cap(t):
    return ''.join(t.title().split('-'))

def title(t):
    return t.title().replace('-', ' ')

def neatProps(props):
    params = [p.split(':')[0].strip().strip('?') for p in props.split(';')]
    return ', '.join([p for p in params if p])

def singularize(word):
    vowels = "aeiou"

    if word.endswith("ies"):
        if word[-4] not in vowels:
            return word[:-3] + "y"

    if word.endswith("ves"):
        return word[:-3] + "f"  # fe인 경우도 있음

    if word.endswith("es"):
        if word[-3] in "sxz":
            return word[:-2]
        if word[-4:-2] in ["sh", "ch"]:
            return word[:-2]
        if word[-3] == "o" and word[-4] not in vowels:
            return word[:-2]

    if word.endswith("s"):
        if word[-2] == "y" and word[-3] in vowels:
            return word[:-1]
        return word[:-1]

    return word

endglobal

# https://gist.github.com/mutewinter/825f44bfd3aa810088ea5de2f61bad63
snippet ii "magic import" b
import `!p snip.rv=formatVariableName(t[1])` from '${1}';
endsnippet

snippet imk "imk" b
import $1 from '`!p snip.rv=kebabcase(t[1])`$2';
endsnippet

snippet imn "imn" b
import { $1 } from '$2';
endsnippet

snippet rfcde "export default react function component" b
import React from 'react';

type Props = {
  $2
};

const ${1:`!v expand('%:t:r')`} = (props: Props) => {
  return (
    $0
  );
};

export default $1;
endsnippet

snippet rccde "export default react class component" b
import React, { Component } from 'react';

type Props = {
  $2
};

type State = {
  $3
};

class ${1:`!v expand('%:t:r')`} extends Component<Props, State> {
  $4
  render() {
    return (
      $0
    );
  }
}

export default $1;
endsnippet

snippet uR "use reference" b
const $1 = useRef<$2>($3);
endsnippet

snippet uS "use state" b
const [$1, set`!p snip.rv=pascal(t[1])`] = useState<$3>($4);
endsnippet

snippet uE "use effect" b
useEffect(() => {
  $1
  return () => {$2};
}, [$3]);
endsnippet

snippet uM "use memo" b
const $1 = useMemo<$2>(() => $3, [$4]);
endsnippet

snippet cl "console log" b
console.log($1);
endsnippet

snippet fe "function expression" b
$1 = ($2) => {
  $3
};
endsnippet

snippet fec "const function expression" b
const $1 = ($2) => {
  $0
};
endsnippet

snippet fece "export const function expression" b
export const $1 = ($2) => {
  $0
};
endsnippet

snippet rfced "react function component export default" b
const ${1:`!v expand('%:t:r')`} = ($2) => {
  return (
    $0
  );
};

export default $1;
endsnippet


snippet edf "export default function" b
import type { Route } from "./+types/`!v expand('%:t:r')`"

export const meta: Route.MetaFunction = () => {
  return [
    { title: "${2:`!p snip.rv=title(snip.basename)`} | wemake" },
    { name: "description", content: "$3" },
  ];
}

export default function `!p snip.rv=cap(snip.basename)`({ params }: Route.ComponentProps) {
  return (
    <div>
      ${0:`!p snip.rv=title(snip.basename)`}
    </div>
  );
}
endsnippet

snippet lo "layout" b
import { Outlet } from "react-router";

export default function `!p snip.rv=cap(snip.basename)`() {
  return (
    <div>
      <Outlet />
    </div>
  );
}
endsnippet

snippet redi "redirect" b
import { redirect } from "react-router";
import type { Route } from "./+types/`!v expand('%:t:r')`";

export function loader({ params }: Route.LoaderArgs) {
  return redirect(\`$0\`);
}
endsnippet

snippet afm "Array.from({length:}).map((), i) => (" b
{Array.from({ length: $1 }).map((_, index) => (
  $0
))}
endsnippet

snippet absc "abstract component" b
interface $1Props {
  $2
}

export function ${1:`!p snip.rv=cap(snip.basename)`}({`!p snip.rv=neatProps(t[2])`}: $1Props ) {
  return (
    $0
  );
}
endsnippet

snippet ava "avatar" b
<Avatar>
  <AvatarImage src="${1:https://github.com/shadcn.png}" />
  <AvatarFallback>${2:S}</AvatarFallback>
</Avatar>
endsnippet

snippet arr "array" b
{Array.from({length: $1}).map((_, index) => (
  $0
))}
endsnippet

snippet tbl "table" b
import { check, pgEnum, pgSchema, pgTable, primaryKey } from "drizzle-orm/pg-core";
import { bigserial, boolean, integer, jsonb, text, timestamp, uuid } from "drizzle-orm/pg-core";
import { sql } from "drizzle-orm";

export const ${1:`!v expand('%:h:t')`} = pgTable( "${2:`!p snip.rv=snake(t[1])`}", {
  ${3:`!p snip.rv=singularize(t[2])`_id}: bigserial({ mode: 'number' }).primaryKey(),
  $0
  created_at: timestamp().notNull().defaultNow(),
  updated_at: timestamp().notNull().defaultNow(),
});
endsnippet

snippet .fk "foreign key" i
.references(() => $1.${2:`!p snip.rv=singularize(t[1])`_id}, { onDelete: "${3:cascade}" }),
endsnippet

snippet enum "pg enum" b
export const $1 = pgEnum(
  "${2:`!p snip.rv=snake(t[1])`}",
  [$0]
);
endsnippet

snippet tblchk "table constraint" i
, (table) => [
  primaryKey({columns: [table.$1]}),
  check("$2", sql\`${table.$3} $4\`),$0
]
endsnippet
