global !p
def kebabcase(t):
    return '-'.join([w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t)])

def pascal(t):
    return re.sub(r'^(\w)', lambda m: m.group(1).upper(), t)

def formatVariableName(path):
    parts = path.split('/')
    module = parts[0]
    if len(parts) > 1:
        return parts[-1]
    else:
        return re.sub(r'[_\-]', '', module.title())
endglobal

# https://gist.github.com/mutewinter/825f44bfd3aa810088ea5de2f61bad63
snippet ii "magic import" b
import `!p snip.rv=formatVariableName(t[1])` from '${1}';
endsnippet

snippet imk "imk" b
import $1 from '`!p snip.rv=kebabcase(t[1])`$2';
endsnippet

snippet imn "imn" b
import { $1 } from '$2';
endsnippet

snippet rfcde "export default react function component" b
import React from 'react';

type Props = {
  $2
};

const ${1:`!v expand('%:t:r')`} = (props: Props) => {
  return (
    $0
  );
};

export default $1;
endsnippet

snippet rccde "export default react class component" b
import React, { Component } from 'react';

type Props = {
  $2
};

type State = {
  $3
};

class ${1:`!v expand('%:t:r')`} extends Component<Props, State> {
  $4
  render() {
    return (
      $0
    );
  }
}

export default $1;
endsnippet

snippet uR "uR" b
const $1 = useRef<$2>($3);
endsnippet

snippet uS "uS" b
const [$1, set`!p snip.rv=pascal(t[1])`] = useState<$3>($4);
endsnippet

snippet uE "uE" b
useEffect(() => {
  $1
  return () => {$2};
}, [$3]);
endsnippet

snippet uM "uM" b
const $1 = useMemo<$2>(() => $3, [$4]);
endsnippet

snippet cl "cl" b
console.log($1);
endsnippet

snippet fe "function expression" b
$1 = ($2) => {
  $3
};
endsnippet

snippet fec "const function expression" b
const $1 = ($2) => {
  $0
};
endsnippet

snippet fece "export const function expression" b
export const $1 = ($2) => {
  $0
};
endsnippet
